// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sve_api.Models;

#nullable disable

namespace sve_api.Migrations
{
    [DbContext(typeof(SveContext))]
    partial class SveContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("sve.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCliente"));

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdCliente");

                    b.HasIndex("IdUsuario")
                        .IsUnique();

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("sve.Models.Entrada", b =>
                {
                    b.Property<int>("IdEntrada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEntrada"));

                    b.Property<int>("ClienteIdCliente")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int>("FuncionIdFuncion")
                        .HasColumnType("int");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdFuncion")
                        .HasColumnType("int");

                    b.Property<int>("IdOrden")
                        .HasColumnType("int");

                    b.Property<int>("IdTarifa")
                        .HasColumnType("int");

                    b.Property<int>("OrdenIdOrden")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TarifaIdTarifa")
                        .HasColumnType("int");

                    b.HasKey("IdEntrada");

                    b.HasIndex("ClienteIdCliente");

                    b.HasIndex("FuncionIdFuncion");

                    b.HasIndex("IdOrden");

                    b.HasIndex("IdTarifa");

                    b.HasIndex("OrdenIdOrden");

                    b.HasIndex("TarifaIdTarifa");

                    b.ToTable("Entrada");
                });

            modelBuilder.Entity("sve.Models.Evento", b =>
                {
                    b.Property<int>("IdEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEvento"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdEvento");

                    b.ToTable("Evento");
                });

            modelBuilder.Entity("sve.Models.Funcion", b =>
                {
                    b.Property<int>("IdFuncion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdFuncion"));

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int?>("EventoIdEvento")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdEvento")
                        .HasColumnType("int");

                    b.Property<int>("IdLocal")
                        .HasColumnType("int");

                    b.Property<int?>("LocalIdLocal")
                        .HasColumnType("int");

                    b.HasKey("IdFuncion");

                    b.HasIndex("EventoIdEvento");

                    b.HasIndex("IdEvento");

                    b.HasIndex("LocalIdLocal");

                    b.ToTable("Funcion");
                });

            modelBuilder.Entity("sve.Models.Local", b =>
                {
                    b.Property<int>("IdLocal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdLocal"));

                    b.Property<int>("CapacidadTotal")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdLocal");

                    b.ToTable("Local");
                });

            modelBuilder.Entity("sve.Models.Orden", b =>
                {
                    b.Property<int>("IdOrden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdOrden"));

                    b.Property<int>("ClienteIdCliente")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdTarifa")
                        .HasColumnType("int");

                    b.Property<int>("TarifaIdTarifa")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("IdOrden");

                    b.HasIndex("ClienteIdCliente");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdTarifa");

                    b.HasIndex("TarifaIdTarifa");

                    b.ToTable("Orden");
                });

            modelBuilder.Entity("sve.Models.Sector", b =>
                {
                    b.Property<int>("IdSector")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdSector"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<int>("IdLocal")
                        .HasColumnType("int");

                    b.Property<int>("LocalIdLocal")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdSector");

                    b.HasIndex("IdLocal");

                    b.HasIndex("LocalIdLocal");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("sve.Models.Tarifa", b =>
                {
                    b.Property<int>("IdTarifa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTarifa"));

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int?>("FuncionIdFuncion")
                        .HasColumnType("int");

                    b.Property<int>("IdFuncion")
                        .HasColumnType("int");

                    b.Property<int>("IdSector")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("SectorIdSector")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdTarifa");

                    b.HasIndex("FuncionIdFuncion");

                    b.HasIndex("SectorIdSector");

                    b.ToTable("Tarifa");
                });

            modelBuilder.Entity("sve.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Apodo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.Property<string>("contrasenia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("sve.Models.Cliente", b =>
                {
                    b.HasOne("sve.Models.Usuario", "Usuario")
                        .WithOne("Cliente")
                        .HasForeignKey("sve.Models.Cliente", "IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("sve.Models.Entrada", b =>
                {
                    b.HasOne("sve.Models.Cliente", "Cliente")
                        .WithMany("Entradas")
                        .HasForeignKey("ClienteIdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sve.Models.Funcion", "Funcion")
                        .WithMany()
                        .HasForeignKey("FuncionIdFuncion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sve.Models.Orden", null)
                        .WithMany("Entradas")
                        .HasForeignKey("IdOrden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sve.Models.Tarifa", null)
                        .WithMany("Entradas")
                        .HasForeignKey("IdTarifa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sve.Models.Orden", "Orden")
                        .WithMany()
                        .HasForeignKey("OrdenIdOrden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sve.Models.Tarifa", "Tarifa")
                        .WithMany()
                        .HasForeignKey("TarifaIdTarifa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Funcion");

                    b.Navigation("Orden");

                    b.Navigation("Tarifa");
                });

            modelBuilder.Entity("sve.Models.Funcion", b =>
                {
                    b.HasOne("sve.Models.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoIdEvento");

                    b.HasOne("sve.Models.Evento", null)
                        .WithMany("Funciones")
                        .HasForeignKey("IdEvento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sve.Models.Local", "Local")
                        .WithMany("Funciones")
                        .HasForeignKey("LocalIdLocal");

                    b.Navigation("Evento");

                    b.Navigation("Local");
                });

            modelBuilder.Entity("sve.Models.Orden", b =>
                {
                    b.HasOne("sve.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteIdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sve.Models.Cliente", null)
                        .WithMany("Ordenes")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sve.Models.Tarifa", null)
                        .WithMany("Ordenes")
                        .HasForeignKey("IdTarifa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sve.Models.Tarifa", "Tarifa")
                        .WithMany()
                        .HasForeignKey("TarifaIdTarifa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Tarifa");
                });

            modelBuilder.Entity("sve.Models.Sector", b =>
                {
                    b.HasOne("sve.Models.Local", null)
                        .WithMany("Sectores")
                        .HasForeignKey("IdLocal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sve.Models.Local", "Local")
                        .WithMany()
                        .HasForeignKey("LocalIdLocal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Local");
                });

            modelBuilder.Entity("sve.Models.Tarifa", b =>
                {
                    b.HasOne("sve.Models.Funcion", "Funcion")
                        .WithMany()
                        .HasForeignKey("FuncionIdFuncion");

                    b.HasOne("sve.Models.Sector", "Sector")
                        .WithMany("Tarifas")
                        .HasForeignKey("SectorIdSector");

                    b.Navigation("Funcion");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("sve.Models.Cliente", b =>
                {
                    b.Navigation("Entradas");

                    b.Navigation("Ordenes");
                });

            modelBuilder.Entity("sve.Models.Evento", b =>
                {
                    b.Navigation("Funciones");
                });

            modelBuilder.Entity("sve.Models.Local", b =>
                {
                    b.Navigation("Funciones");

                    b.Navigation("Sectores");
                });

            modelBuilder.Entity("sve.Models.Orden", b =>
                {
                    b.Navigation("Entradas");
                });

            modelBuilder.Entity("sve.Models.Sector", b =>
                {
                    b.Navigation("Tarifas");
                });

            modelBuilder.Entity("sve.Models.Tarifa", b =>
                {
                    b.Navigation("Entradas");

                    b.Navigation("Ordenes");
                });

            modelBuilder.Entity("sve.Models.Usuario", b =>
                {
                    b.Navigation("Cliente");
                });
#pragma warning restore 612, 618
        }
    }
}
